import Head from "next/head";
import Router from "next/router";
import Cookies from "universal-cookie";
import { useState, useEffect } from "react";
import ReactDOM from "react-dom";
import Modal from "react-modal";
import React from "react";
import { animalNames } from "../utilities/constants";

Modal.setAppElement("#modal-root");

export default function Home({ isAuthenticated }) {
  // First check if the user has entered the correct password
  useEffect(() => {
    if (!isAuthenticated) Router.push("/login");
  }, []);

  const [playerName, setPlayerName] = useState("");
  const [joinRoomName, setJoinRoomName] = useState("");
  const [createModalIsOpen, setCreateModalIsOpen] = useState(false);
  const [joinModalIsOpen, setJoinModalIsOpen] = useState(false);

  function handleChange(e) {
    if (e.target.name === "playerName") setPlayerName(e.target.value);
    if (e.target.name === "joinRoomName") setJoinRoomName(e.target.value);
  }

  async function createRoom() {
    // No player name
    if (!playerName) return;

    let roomName;
    let maxTries = 20;
    let c = 0;

    while (!roomName && c != maxTries) {
      // Create a random animal name
      const animal =
        animalNames[Math.floor(Math.random() * animalNames.length)];

      // Check if room exists
      const res = await fetch("api/getRoom", {
        body: JSON.stringify({ roomName: "Fuchs" }),
        headers: {
          "Content-Type": "application/json",
        },
        method: "POST",
      });
      const json = await res.json();

      // No room found
      if (json.data.length === 0) {
        roomName = animal;
        break;
      }

      const createdDate = json.data[0].ts / 1000;
      const now = Date.now();

      // If room has been created more than 24 hours ago, delete it
      if (now - createdDate > 86400000) {
        const res = await fetch("api/destroyRoom", {
          body: JSON.stringify({ roomRefId: json.data[0].ref.id }),
          headers: {
            "Content-Type": "application/json",
          },
          method: "POST",
        });

        roomName = animal;
        break;
      }

      c++;
    }
    // No room available
    if (c === maxTries) return;

    // Create room
    const res = await fetch("api/createRoom", {
      body: JSON.stringify({
        roomName: roomName,
        playerName: playerName,
        host: playerName,
      }),
      headers: {
        "Content-Type": "application/json",
      },
      method: "POST",
    });

    // Save player name to cookies
    const cookies = new Cookies();
    cookies.set("userName", playerName, {
      path: "/",
    });

    console.log(playerName, roomName);

    // Reroute to room
    Router.push(`/${roomName}`);
  }

  async function joinRoom() {
    // No player name
    if (!playerName) return;
    // No room name
    if (!joinRoomName) return;

    const res = await fetch("api/getRoom", {
      body: JSON.stringify({ roomName: joinRoomName }),
      headers: {
        "Content-Type": "application/json",
      },
      method: "POST",
    });
    const json = await res.json();

    // No room found
    if (json.data.length === 0) return;

    // Player name is already in
    if (json.data[0].data.players.some((p) => p === playerName)) return;

    // Save player name to cookies
    const cookies = new Cookies();
    cookies.set("userName", playerName, {
      path: "/",
    });

    // Reroute to room
    Router.push(`/${joinRoomName}`);
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="">
        <button onClick={() => setCreateModalIsOpen(true)}>
          Raum erstellen
        </button>
        <button onClick={() => setJoinModalIsOpen(true)}>Raum beitreten</button>

        <Modal
          isOpen={createModalIsOpen}
          onRequestClose={() => setCreateModalIsOpen(false)}
          className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white w-11/12 md:max-w-md rounded-lg shadow-lg z-50 overflow-y-auto p-5"
          overlayClassName="bg-gray-500/25 fixed inset-0 z-40"
        >
          <div className="font-bold">Raum erstellen</div>
          <button onClick={() => setCreateModalIsOpen(false)}>close</button>
          <form>
            <div className="relative p-6 flex-auto">
              <p className="my-4 text-blueGray-500 text-lg leading-relaxed">
                Wie ist dein Name?
              </p>
              <input
                type="text"
                value={playerName}
                onChange={handleChange}
                autoFocus={true}
                name="playerName"
                className="border"
              />
            </div>
          </form>
          <button onClick={createRoom}>erstellen</button>
        </Modal>

        <Modal
          isOpen={joinModalIsOpen}
          onRequestClose={() => setJoinModalIsOpen(false)}
          className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white w-11/12 md:max-w-md rounded-lg shadow-lg z-50 overflow-y-auto p-5"
          overlayClassName="bg-gray-500/25 fixed inset-0 z-40"
        >
          <div className="font-bold">Raum beitreten</div>
          <button onClick={() => setJoinModalIsOpen(false)}>close</button>
          <form>
            <div className="relative p-6 flex-auto">
              <p className="my-4 text-blueGray-500 text-lg leading-relaxed">
                Wie ist dein Name?
              </p>
              <input
                type="text"
                value={playerName}
                onChange={handleChange}
                autoFocus={true}
                name="playerName"
                className="border"
              />
            </div>
            <div className="relative p-6 flex-auto">
              <p className="my-4 text-blueGray-500 text-lg leading-relaxed">
                Wie ist die Raum Nummer?
              </p>
              <input
                type="text"
                value={joinRoomName}
                onChange={handleChange}
                autoFocus={true}
                name="joinRoomName"
                className="border"
              />
            </div>
          </form>
          <button onClick={joinRoom}>beitreten</button>
        </Modal>
      </div>
    </div>
  );
}
